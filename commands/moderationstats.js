const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./warnings.db');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('warnstats')
    .setDescription('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è—Ö —Ç–∞ –º—é—Ç–∞—Ö'),

  async execute(interaction) {
    db.all('SELECT user_id, type FROM logs', async (err, rows) => {
      if (err) return interaction.reply({ content: '‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.', ephemeral: true });
      if (rows.length === 0) return interaction.reply({ content: '‚úÖ –ù–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.', ephemeral: true });

      const stats = {};
      rows.forEach(({ user_id, type }) => {
        if (!stats[user_id]) stats[user_id] = { warn: 0, mute: 0 };
        stats[user_id][type]++;
      });

      const entries = await Promise.all(
        Object.entries(stats).map(async ([id, counts]) => {
          const user = await interaction.client.users.fetch(id).catch(() => null);
          const tag = user?.tag || Unknown (id);
          return ` **${tag}** ‚Äî ${counts.warn} –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å(–Ω—è), ${counts.mute} –º—é—Ç(–∏)`;
        })
      );

      const embed = new EmbedBuilder()
        .setTitle('üìä –ó–∞–≥–∞–ª—å–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        .setDescription(entries.join('\n'))
        .setColor(0x00bfff);

      await interaction.reply({ embeds: [embed], ephemeral: true });
    });
  }
};