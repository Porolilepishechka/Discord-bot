require('dotenv').config();
const fs = require('fs');
const { Client, GatewayIntentBits } = require('discord.js');

let forbiddenWords = [];
let orgForbiddenWords = [];

let warnWords = [];
let orgwarnWords = [];
const path = require('path');

try {
    const dataFB = fs.readFileSync(path.join(__dirname, 'forbidden.txt'), 'utf-8');
    forbiddenWords = dataFB.split(',').map(word => word.trim().replace(/\s/g, '').toLowerCase());
    orgForbiddenWords = dataFB.split(',').map(word => word.trim());
    console.log("dataFB: " ,orgForbiddenWords);
    console.log('—Å–ª–æ–≤–∞ –∑—á–∏—Ç–∞–Ω–æ');
} catch (error) {
    console.log('–§–∞–π–ª forbidden.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤ –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—ñ–π.', error);
}

try {
    const dataWW = fs.readFileSync(path.join(__dirname, 'warnWords.txt'), 'utf-8');
    warnWords = dataWW.split(',').map(word => word.trim().replace(/\s/g, '').toLowerCase());
    orgwarnWords = dataWW.split(',').map(word => word.trim());
    console.log("dataWW: " ,orgwarnWords);
    console.log('—Å–ª–æ–≤–∞ –∑—á–∏—Ç–∞–Ω–æ');
} catch (error) {
    console.log('–§–∞–π–ª warnWords.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤ –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—ñ–π.', error);
}

async function WriteToFile(content) {
    fs.appendFile('log.txt', content, err => {
        if (err) {
            console.error(err);
        } else {
            console.log("text has been writed")
        }
    });
}

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

client.once('ready', () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —è–∫ ${client.user.tag}`);
});

client.on('messageCreate', async message => {
    if (message.author.bot) return;

    const cleanMessage = message.content
        .toLowerCase()
        .replace(/[.,!?;:()"'¬´¬ª\-]/g, '')
        .replace(/\s+/g, ' ')
        .trim();

    const wordsInMessage = cleanMessage.split(' ');

    if (!wordsInMessage) return;

    const triggeredForbiddenWords = forbiddenWords.find(word => wordsInMessage.includes(word));
    const triggeredWarnWords = warnWords.find(word => wordsInMessage.includes(word));

    const logChannel = message.guild.channels.cache.find(channel => 
        channel.name.toLowerCase() === 'karatel-logs' && channel.isTextBased()
    );

    if (triggeredWarnWords) {
        const originalWord = orgwarnWords.find(w => w.toLowerCase().replace(/\s/g, '') === triggeredWarnWords);
        const AdminRole = message.guild.roles.cache.find(role => role.name.toLowerCase() === '‚òÖbot assistant‚òÖ');

        await message.delete();
        console.log(`–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: ${originalWord}`);
        if (message.author.tag.length != 0) {
            const content = `user {${message.author.tag}}\n`
            WriteToFile(content);
        }

        try {
            await message.author.send(
                `üö´ –¢–≤—ñ–π –º–µ—Å–µ–¥–∂ –º—ñ—Å—Ç–∏–≤ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: **${originalWord}**\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message.content}"\n–¶–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä–Ω —Ç–æ–º—É –±—É–¥—å —É–≤–∞–∂–Ω–∏–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É.`
            );
        } catch (err) {
            console.log('–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ DM:', err);
        }

        if (logChannel) {
            logChannel.send(
                `${AdminRole}\n –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É **${message.author.tag}** –±—É–≤ –≤–∏–¥–∞–Ω–Ω–∏–π –≤–∞—Ä–Ω –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞: **${originalWord}**\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message.content}"\n–ß–∞—Å: <t:${Math.floor(Date.now() / 1000)}:F>`
            );
        } else {
            console.log('–ö–∞–Ω–∞–ª logs –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
    }

    if (triggeredForbiddenWords) {
        const originalWord = orgForbiddenWords.find(w => w.toLowerCase().replace(/\s/g, '') === triggeredForbiddenWords);
        
        await message.delete();
        console.log(`–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: ${originalWord}`);
        if (message.author.tag.length != 0) {
            const content = `user {${message.author.tag}}\n`
            WriteToFile(content);
        }

        try {
            await message.author.send(
                `üö´ –¢–≤—ñ–π –º–µ—Å–µ–¥–∂ –º—ñ—Å—Ç–∏–≤ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: **${originalWord}**\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message.content}"\n–ë—É–¥—å —É–≤–∞–∂–Ω–∏–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É.`
            );
        } catch (err) {
            console.log('–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ DM:', err);
        }

        const muteRole = message.guild.roles.cache.find(role => role.name.toLowerCase() === 'muted');
        const AdminRole = message.guild.roles.cache.find(role => role.name.toLowerCase() === '‚òÖbot assistant‚òÖ');
        if (muteRole) {
            try {
                await message.member.roles.add(muteRole);
                if (logChannel) {
                    logChannel.send(
                        `${AdminRole}\nüîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á **${message.author.tag}** –±—É–≤ –∑–∞–º'—é—á–µ–Ω–∏–π –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞: **${originalWord}**\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message.content}"\n–ß–∞—Å: <t:${Math.floor(Date.now() / 1000)}:F>`
                    );
                } else {
                    console.log('–ö–∞–Ω–∞–ª logs –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
                }

            } catch (err) {
                console.log('–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–¥–∞—Ç–∏ –º—É—Ç:', err);
            }
        } else {
            console.log('–†–æ–ª—å Muted –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
        }

        return;
    }
});

client.login(process.env.TOKEN);
